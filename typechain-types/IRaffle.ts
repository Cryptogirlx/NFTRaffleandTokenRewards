/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IRaffleInterface extends utils.Interface {
  contractName: "IRaffle";
  functions: {
    "getDonorsPerCycle(uint256)": FunctionFragment;
    "getHighestDonationPerCycle(uint256)": FunctionFragment;
    "getTokensInTheBufferEndOfCycle()": FunctionFragment;
    "getTopDonor(uint256)": FunctionFragment;
    "getTotalDonationPerAddressPerCycle(uint256,address)": FunctionFragment;
    "getTotalDonationsPerCycle(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDonorsPerCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHighestDonationPerCycle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokensInTheBufferEndOfCycle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTopDonor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDonationPerAddressPerCycle",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDonationsPerCycle",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDonorsPerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHighestDonationPerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokensInTheBufferEndOfCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopDonor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDonationPerAddressPerCycle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDonationsPerCycle",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRaffle extends BaseContract {
  contractName: "IRaffle";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRaffleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDonorsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getHighestDonationPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTokensInTheBufferEndOfCycle(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTopDonor(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTotalDonationPerAddressPerCycle(
      raffleID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalDonationsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getDonorsPerCycle(
    raffleID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getHighestDonationPerCycle(
    raffleID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTokensInTheBufferEndOfCycle(overrides?: CallOverrides): Promise<BigNumber>;

  getTopDonor(
    raffleID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getTotalDonationPerAddressPerCycle(
    raffleID: BigNumberish,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalDonationsPerCycle(
    raffleID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getDonorsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getHighestDonationPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInTheBufferEndOfCycle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopDonor(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getTotalDonationPerAddressPerCycle(
      raffleID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDonationsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getDonorsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHighestDonationPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokensInTheBufferEndOfCycle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTopDonor(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDonationPerAddressPerCycle(
      raffleID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDonationsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDonorsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHighestDonationPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokensInTheBufferEndOfCycle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTopDonor(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDonationPerAddressPerCycle(
      raffleID: BigNumberish,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDonationsPerCycle(
      raffleID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
