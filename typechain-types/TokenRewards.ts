/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface TokenRewardsInterface extends utils.Interface {
  contractName: "TokenRewards";
  functions: {
    "getTotalRewardsClaimedPerUser(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "raffleContractAddress()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewardTokenAddress()": FunctionFragment;
    "rewardWalletAddress()": FunctionFragment;
    "sendRewardsToUser(uint256,address)": FunctionFragment;
    "setRewardTokenAddress(address)": FunctionFragment;
    "setRewardWalletAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewDonorClaimableRewards(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getTotalRewardsClaimedPerUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raffleContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardWalletAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendRewardsToUser",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardWalletAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewDonorClaimableRewards",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTotalRewardsClaimedPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raffleContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRewardsToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewDonorClaimableRewards",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RaffleContractAddressSet(address)": EventFragment;
    "RewardTokenAddressSet(address)": EventFragment;
    "RewardWalletAddressSet(address)": EventFragment;
    "RewardsClaimedPerCycle(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RaffleContractAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTokenAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardWalletAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimedPerCycle"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RaffleContractAddressSetEvent = TypedEvent<
  [string],
  { contractAddress: string }
>;

export type RaffleContractAddressSetEventFilter =
  TypedEventFilter<RaffleContractAddressSetEvent>;

export type RewardTokenAddressSetEvent = TypedEvent<
  [string],
  { tokenAddress: string }
>;

export type RewardTokenAddressSetEventFilter =
  TypedEventFilter<RewardTokenAddressSetEvent>;

export type RewardWalletAddressSetEvent = TypedEvent<
  [string],
  { walletAddress: string }
>;

export type RewardWalletAddressSetEventFilter =
  TypedEventFilter<RewardWalletAddressSetEvent>;

export type RewardsClaimedPerCycleEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { donor: string; raffleID: BigNumber; amount: BigNumber }
>;

export type RewardsClaimedPerCycleEventFilter =
  TypedEventFilter<RewardsClaimedPerCycleEvent>;

export interface TokenRewards extends BaseContract {
  contractName: "TokenRewards";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenRewardsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTotalRewardsClaimedPerUser(
      donor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    raffleContractAddress(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewardTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    rewardWalletAddress(overrides?: CallOverrides): Promise<[string]>;

    sendRewardsToUser(
      raffleID: BigNumberish,
      donor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardTokenAddress(
      _rewardTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardWalletAddress(
      _rewardWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewDonorClaimableRewards(
      _raffleId: BigNumberish,
      _donor: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getTotalRewardsClaimedPerUser(
    donor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  raffleContractAddress(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewardTokenAddress(overrides?: CallOverrides): Promise<string>;

  rewardWalletAddress(overrides?: CallOverrides): Promise<string>;

  sendRewardsToUser(
    raffleID: BigNumberish,
    donor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardTokenAddress(
    _rewardTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardWalletAddress(
    _rewardWalletAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewDonorClaimableRewards(
    _raffleId: BigNumberish,
    _donor: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getTotalRewardsClaimedPerUser(
      donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    raffleContractAddress(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewardTokenAddress(overrides?: CallOverrides): Promise<string>;

    rewardWalletAddress(overrides?: CallOverrides): Promise<string>;

    sendRewardsToUser(
      raffleID: BigNumberish,
      donor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardTokenAddress(
      _rewardTokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardWalletAddress(
      _rewardWalletAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewDonorClaimableRewards(
      _raffleId: BigNumberish,
      _donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RaffleContractAddressSet(address)"(
      contractAddress?: null
    ): RaffleContractAddressSetEventFilter;
    RaffleContractAddressSet(
      contractAddress?: null
    ): RaffleContractAddressSetEventFilter;

    "RewardTokenAddressSet(address)"(
      tokenAddress?: null
    ): RewardTokenAddressSetEventFilter;
    RewardTokenAddressSet(
      tokenAddress?: null
    ): RewardTokenAddressSetEventFilter;

    "RewardWalletAddressSet(address)"(
      walletAddress?: null
    ): RewardWalletAddressSetEventFilter;
    RewardWalletAddressSet(
      walletAddress?: null
    ): RewardWalletAddressSetEventFilter;

    "RewardsClaimedPerCycle(address,uint256,uint256)"(
      donor?: null,
      raffleID?: null,
      amount?: null
    ): RewardsClaimedPerCycleEventFilter;
    RewardsClaimedPerCycle(
      donor?: null,
      raffleID?: null,
      amount?: null
    ): RewardsClaimedPerCycleEventFilter;
  };

  estimateGas: {
    getTotalRewardsClaimedPerUser(
      donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    raffleContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewardTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    rewardWalletAddress(overrides?: CallOverrides): Promise<BigNumber>;

    sendRewardsToUser(
      raffleID: BigNumberish,
      donor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardTokenAddress(
      _rewardTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardWalletAddress(
      _rewardWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewDonorClaimableRewards(
      _raffleId: BigNumberish,
      _donor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTotalRewardsClaimedPerUser(
      donor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raffleContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardWalletAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendRewardsToUser(
      raffleID: BigNumberish,
      donor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardTokenAddress(
      _rewardTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardWalletAddress(
      _rewardWalletAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewDonorClaimableRewards(
      _raffleId: BigNumberish,
      _donor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
